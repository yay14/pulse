// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.3
// source: ingestion.proto

package ingestion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IngestionServiceClient is the client API for IngestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngestionServiceClient interface {
	// API for ingesting metrics data from Kafka
	IngestData(ctx context.Context, in *IngestDataRequest, opts ...grpc.CallOption) (*IngestDataResponse, error)
	// API for validating metrics data based on predefined rules
	ValidateMetrics(ctx context.Context, in *ValidateDataRequest, opts ...grpc.CallOption) (*ValidateDataResponse, error)
	// API for adding validations on metrics using name and source_id
	AddMetricValidation(ctx context.Context, in *NewValidationRequest, opts ...grpc.CallOption) (*NewValidationResponse, error)
}

type ingestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestionServiceClient(cc grpc.ClientConnInterface) IngestionServiceClient {
	return &ingestionServiceClient{cc}
}

func (c *ingestionServiceClient) IngestData(ctx context.Context, in *IngestDataRequest, opts ...grpc.CallOption) (*IngestDataResponse, error) {
	out := new(IngestDataResponse)
	err := c.cc.Invoke(ctx, "/IngestionService/IngestData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ValidateMetrics(ctx context.Context, in *ValidateDataRequest, opts ...grpc.CallOption) (*ValidateDataResponse, error) {
	out := new(ValidateDataResponse)
	err := c.cc.Invoke(ctx, "/IngestionService/ValidateMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) AddMetricValidation(ctx context.Context, in *NewValidationRequest, opts ...grpc.CallOption) (*NewValidationResponse, error) {
	out := new(NewValidationResponse)
	err := c.cc.Invoke(ctx, "/IngestionService/AddMetricValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestionServiceServer is the server API for IngestionService service.
// All implementations must embed UnimplementedIngestionServiceServer
// for forward compatibility
type IngestionServiceServer interface {
	// API for ingesting metrics data from Kafka
	IngestData(context.Context, *IngestDataRequest) (*IngestDataResponse, error)
	// API for validating metrics data based on predefined rules
	ValidateMetrics(context.Context, *ValidateDataRequest) (*ValidateDataResponse, error)
	// API for adding validations on metrics using name and source_id
	AddMetricValidation(context.Context, *NewValidationRequest) (*NewValidationResponse, error)
	mustEmbedUnimplementedIngestionServiceServer()
}

// UnimplementedIngestionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIngestionServiceServer struct {
}

func (UnimplementedIngestionServiceServer) IngestData(context.Context, *IngestDataRequest) (*IngestDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestData not implemented")
}
func (UnimplementedIngestionServiceServer) ValidateMetrics(context.Context, *ValidateDataRequest) (*ValidateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateMetrics not implemented")
}
func (UnimplementedIngestionServiceServer) AddMetricValidation(context.Context, *NewValidationRequest) (*NewValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetricValidation not implemented")
}
func (UnimplementedIngestionServiceServer) mustEmbedUnimplementedIngestionServiceServer() {}

// UnsafeIngestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestionServiceServer will
// result in compilation errors.
type UnsafeIngestionServiceServer interface {
	mustEmbedUnimplementedIngestionServiceServer()
}

func RegisterIngestionServiceServer(s grpc.ServiceRegistrar, srv IngestionServiceServer) {
	s.RegisterService(&IngestionService_ServiceDesc, srv)
}

func _IngestionService_IngestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).IngestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestionService/IngestData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).IngestData(ctx, req.(*IngestDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ValidateMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ValidateMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestionService/ValidateMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ValidateMetrics(ctx, req.(*ValidateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_AddMetricValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).AddMetricValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestionService/AddMetricValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).AddMetricValidation(ctx, req.(*NewValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IngestionService_ServiceDesc is the grpc.ServiceDesc for IngestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IngestionService",
	HandlerType: (*IngestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestData",
			Handler:    _IngestionService_IngestData_Handler,
		},
		{
			MethodName: "ValidateMetrics",
			Handler:    _IngestionService_ValidateMetrics_Handler,
		},
		{
			MethodName: "AddMetricValidation",
			Handler:    _IngestionService_AddMetricValidation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ingestion.proto",
}
